{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ECG Backend Quickstart Prerequisites Docker & Docker Compose Running the application Notice that the .env.docker file is used to set the environment variables for the application in development . You can change the values in this file to suit your needs. To run the application, execute the following command: ./run_dev.sh This will start the application and the database. The application will be available at http://localhost:8000/api/docs . Run the api as a development server in foreground This way of running the application is useful for development. It will start the application in the foreground and you will be able to see the logs in the terminal. docker-compose run --rm --service-ports api","title":"Home"},{"location":"#ecg-backend","text":"","title":"ECG Backend"},{"location":"#quickstart","text":"","title":"Quickstart"},{"location":"#prerequisites","text":"Docker & Docker Compose","title":"Prerequisites"},{"location":"#running-the-application","text":"Notice that the .env.docker file is used to set the environment variables for the application in development . You can change the values in this file to suit your needs. To run the application, execute the following command: ./run_dev.sh This will start the application and the database. The application will be available at http://localhost:8000/api/docs .","title":"Running the application"},{"location":"#run-the-api-as-a-development-server-in-foreground","text":"This way of running the application is useful for development. It will start the application in the foreground and you will be able to see the logs in the terminal. docker-compose run --rm --service-ports api","title":"Run the api as a development server in foreground"},{"location":"api/","text":"API ECG backend provides a REST API to handle users and upload ECGs. API Documentation Documentation","title":"Intro"},{"location":"api/#api","text":"ECG backend provides a REST API to handle users and upload ECGs.","title":"API"},{"location":"api/#api-documentation","text":"Documentation","title":"API Documentation"},{"location":"ecg_create/","text":"Upload ECG To upload an ECG, you need to be logged in as a user. If you are not logged in, you can follow the instructions in the User login section. Once you are logged in, go to http://localhost:8000/api/docs and click on the POST /ecgs/ endpoint. Then, fill in the form with the following data: file: <file> Once you click on the Execute button, you will see the response with the new ECG data. Now you can list the ECGs and view the details of the new ECG. List ECGs: http://localhost:8000/api/docs#/ECGs/list_ecgs_ecgs_get Technical considerations The API is designed to be performant and scalable. You can upload big JSON files, since the app uses a streaming approach to parse the data and store it in the database. The JSON file is parsed in streaming using ijson library and the data is sent to the database in chunks. This way, the app can handle big files without consuming a lot of memory. ECG Signal processors Every time you upload an ECG, the app will first store the raw data in the database and then it triggers background tasks to process the data and store the results in the database. Adding Signal processors There is an abstract base class SignalProcessor that you can use to create new signal processors. You can find the base class in the ecg_backend.processors module. To create a new signal processor, you need to create a new class that inherits from SignalProcessor and implement the process method. This method will receive the ECG data and should return the processed data. There is no need to register the new processor in the app. The app will automatically find the new processor and trigger it when an ECG is uploaded. In this case I opted to use introspection to find the processors to avoid more external dependencies, but this feature can also be implemented using the Observer design pattern . NumCrossesZeroSignalProcessor This processor calculates the number of times the signal crosses the zero line. You can find the implementation in the ecg_backend.processors.num_crosses_zero module. The implementation uses a raw PostgreSQL query to calculate the number of times the signal crosses the zero line. It is a simple way to implement it, since the data is already stored in the PostgreSQL database, but in future implementations, we could use a more efficient way to calculate this value.","title":"Upload ECG"},{"location":"ecg_create/#upload-ecg","text":"To upload an ECG, you need to be logged in as a user. If you are not logged in, you can follow the instructions in the User login section. Once you are logged in, go to http://localhost:8000/api/docs and click on the POST /ecgs/ endpoint. Then, fill in the form with the following data: file: <file> Once you click on the Execute button, you will see the response with the new ECG data. Now you can list the ECGs and view the details of the new ECG. List ECGs: http://localhost:8000/api/docs#/ECGs/list_ecgs_ecgs_get","title":"Upload ECG"},{"location":"ecg_create/#technical-considerations","text":"The API is designed to be performant and scalable. You can upload big JSON files, since the app uses a streaming approach to parse the data and store it in the database. The JSON file is parsed in streaming using ijson library and the data is sent to the database in chunks. This way, the app can handle big files without consuming a lot of memory.","title":"Technical considerations"},{"location":"ecg_create/#ecg-signal-processors","text":"Every time you upload an ECG, the app will first store the raw data in the database and then it triggers background tasks to process the data and store the results in the database.","title":"ECG Signal processors"},{"location":"ecg_create/#adding-signal-processors","text":"There is an abstract base class SignalProcessor that you can use to create new signal processors. You can find the base class in the ecg_backend.processors module. To create a new signal processor, you need to create a new class that inherits from SignalProcessor and implement the process method. This method will receive the ECG data and should return the processed data. There is no need to register the new processor in the app. The app will automatically find the new processor and trigger it when an ECG is uploaded. In this case I opted to use introspection to find the processors to avoid more external dependencies, but this feature can also be implemented using the Observer design pattern .","title":"Adding Signal processors"},{"location":"ecg_create/#numcrosseszerosignalprocessor","text":"This processor calculates the number of times the signal crosses the zero line. You can find the implementation in the ecg_backend.processors.num_crosses_zero module. The implementation uses a raw PostgreSQL query to calculate the number of times the signal crosses the zero line. It is a simple way to implement it, since the data is already stored in the PostgreSQL database, but in future implementations, we could use a more efficient way to calculate this value.","title":"NumCrossesZeroSignalProcessor"},{"location":"ecg_detail/","text":"ECG detail Go to http://localhost:8000/api/docs#/ecgs/get_ecg_api_ecgs__ecg_id__get and click \"Try it out\". Then, fill in the form with the following data: ecg_id: <ecg_id> Once you click on the Execute button, you will see the response with the ECG data. The response will contain all the analyses that were triggered when the ECG was uploaded. { \"id\": \"11fc0186-840e-4e29-8dec-4f2ce8287713\", \"user\": \"7b80291f-79dc-4ffb-a5f8-881a6dfa1d53\", \"analyses\": [ { \"id\": \"fdf312fa-6b7f-435d-a966-80eb5cd6ab48\", \"ecg_id\": \"11fc0186-840e-4e29-8dec-4f2ce8287713\", \"created\": \"2024-02-05T18:26:15.966971\", \"finished\": \"2024-02-05T18:26:15.979446\", \"name\": \"num_crosses_zero\", \"status\": \"completed\", \"result\": { \"aVF\": 50, \"aVL\": 37, \"aVR\": 48, \"I\": 47, \"II\": 48, \"III\": 61, \"V1\": 45, \"V2\": 47, \"V3\": 53, \"V4\": 45, \"V5\": 48, \"V6\": 55 }, \"duration\": 0.012475 } ] }","title":"ECG Detail"},{"location":"ecg_detail/#ecg-detail","text":"Go to http://localhost:8000/api/docs#/ecgs/get_ecg_api_ecgs__ecg_id__get and click \"Try it out\". Then, fill in the form with the following data: ecg_id: <ecg_id> Once you click on the Execute button, you will see the response with the ECG data. The response will contain all the analyses that were triggered when the ECG was uploaded. { \"id\": \"11fc0186-840e-4e29-8dec-4f2ce8287713\", \"user\": \"7b80291f-79dc-4ffb-a5f8-881a6dfa1d53\", \"analyses\": [ { \"id\": \"fdf312fa-6b7f-435d-a966-80eb5cd6ab48\", \"ecg_id\": \"11fc0186-840e-4e29-8dec-4f2ce8287713\", \"created\": \"2024-02-05T18:26:15.966971\", \"finished\": \"2024-02-05T18:26:15.979446\", \"name\": \"num_crosses_zero\", \"status\": \"completed\", \"result\": { \"aVF\": 50, \"aVL\": 37, \"aVR\": 48, \"I\": 47, \"II\": 48, \"III\": 61, \"V1\": 45, \"V2\": 47, \"V3\": 53, \"V4\": 45, \"V5\": 48, \"V6\": 55 }, \"duration\": 0.012475 } ] }","title":"ECG detail"},{"location":"tests/","text":"Testing You can run the tests with the following command: scripts/run_pytest.sh tests This will run the tests and generate a coverage report. ---------- coverage: platform linux, python 3.10.13-final-0 ---------- Name Stmts Miss Cover --------------------------------------------------------------------------------- app/__init__.py 0 0 100% app/alembic/versions/1b9b576719b8_create_user_models.py 11 1 91% app/alembic/versions/3dc108746467_add_dataanalysis_model.py 13 2 85% app/alembic/versions/4e8fcb030194_add_fk_signal.py 13 2 85% app/alembic/versions/78dd3a319c0b_create_ecg_models.py 17 4 76% app/alembic/versions/033843a1d580_add_default_for_status.py 9 1 89% app/alembic/versions/abeea6f3fe52_add_cascade_delete.py 9 1 89% app/alembic/versions/becb54088400_fix_ecg_id_field.py 9 1 89% app/alembic/versions/c02de0f9d5e4_add_fk.py 13 2 85% app/api/__init__.py 0 0 100% app/api/dependencies/__init__.py 0 0 100% app/api/dependencies/core.py 5 0 100% app/api/dependencies/user.py 33 10 70% app/api/routers/__init__.py 0 0 100% app/api/routers/auth.py 21 8 62% app/api/routers/ecg.py 70 14 80% app/api/routers/users.py 33 7 79% app/config.py 17 0 100% app/main.py 24 4 83% app/models/__init__.py 4 0 100% app/models/dal.py 41 5 88% app/models/database.py 41 11 73% app/models/ecg.py 53 4 92% app/models/user.py 19 0 100% app/processors/__init__.py 35 14 60% app/processors/num_crosses_zero.py 20 0 100% app/schemas/__init__.py 0 0 100% app/schemas/auth.py 7 0 100% app/schemas/ecg.py 48 0 100% app/schemas/user.py 22 1 95% app/utils/__init__.py 0 0 100% app/utils/auth.py 38 8 79% app/utils/core.py 16 1 94% tests/__init__.py 0 0 100% tests/conftest.py 93 0 100% tests/factories/__init__.py 0 0 100% tests/factories/ecg.py 33 1 97% tests/test_auth.py 16 0 100% tests/test_ecg.py 58 0 100% tests/test_processors.py 29 0 100% tests/test_users.py 46 0 100% --------------------------------------------------------------------------------- TOTAL 916 102 89% 30 passed, 1 warning in 20.18s","title":"Testing"},{"location":"tests/#testing","text":"You can run the tests with the following command: scripts/run_pytest.sh tests This will run the tests and generate a coverage report. ---------- coverage: platform linux, python 3.10.13-final-0 ---------- Name Stmts Miss Cover --------------------------------------------------------------------------------- app/__init__.py 0 0 100% app/alembic/versions/1b9b576719b8_create_user_models.py 11 1 91% app/alembic/versions/3dc108746467_add_dataanalysis_model.py 13 2 85% app/alembic/versions/4e8fcb030194_add_fk_signal.py 13 2 85% app/alembic/versions/78dd3a319c0b_create_ecg_models.py 17 4 76% app/alembic/versions/033843a1d580_add_default_for_status.py 9 1 89% app/alembic/versions/abeea6f3fe52_add_cascade_delete.py 9 1 89% app/alembic/versions/becb54088400_fix_ecg_id_field.py 9 1 89% app/alembic/versions/c02de0f9d5e4_add_fk.py 13 2 85% app/api/__init__.py 0 0 100% app/api/dependencies/__init__.py 0 0 100% app/api/dependencies/core.py 5 0 100% app/api/dependencies/user.py 33 10 70% app/api/routers/__init__.py 0 0 100% app/api/routers/auth.py 21 8 62% app/api/routers/ecg.py 70 14 80% app/api/routers/users.py 33 7 79% app/config.py 17 0 100% app/main.py 24 4 83% app/models/__init__.py 4 0 100% app/models/dal.py 41 5 88% app/models/database.py 41 11 73% app/models/ecg.py 53 4 92% app/models/user.py 19 0 100% app/processors/__init__.py 35 14 60% app/processors/num_crosses_zero.py 20 0 100% app/schemas/__init__.py 0 0 100% app/schemas/auth.py 7 0 100% app/schemas/ecg.py 48 0 100% app/schemas/user.py 22 1 95% app/utils/__init__.py 0 0 100% app/utils/auth.py 38 8 79% app/utils/core.py 16 1 94% tests/__init__.py 0 0 100% tests/conftest.py 93 0 100% tests/factories/__init__.py 0 0 100% tests/factories/ecg.py 33 1 97% tests/test_auth.py 16 0 100% tests/test_ecg.py 58 0 100% tests/test_processors.py 29 0 100% tests/test_users.py 46 0 100% --------------------------------------------------------------------------------- TOTAL 916 102 89% 30 passed, 1 warning in 20.18s","title":"Testing"},{"location":"auth/create_users/","text":"Create Users This app has two different scopes or roles: Admin : Can create and manage users. User : Can upload and view ECGs. To create a user, you need to be an admin. To create an admin, you need to run the following command: scripts/create_superuser.sh <username> If you followed the quickstart and run ./run_dev.sh you will already have the admin user with permissions to create new users. Login as admin To login as admin, go to http://localhost:8000/api/docs and click on the Authorize button. Then, fill in the form with the following data: username: admin password: <password> scope: admin Create a new user To create a new user, go to http://localhost:8000/api/docs and click on the POST /users/ endpoint. Then, fill in the form with the following data: username: <username> role: user password: <password> Click on Execute button and you will see the response with the new user data.","title":"Creating Users"},{"location":"auth/create_users/#create-users","text":"This app has two different scopes or roles: Admin : Can create and manage users. User : Can upload and view ECGs. To create a user, you need to be an admin. To create an admin, you need to run the following command: scripts/create_superuser.sh <username> If you followed the quickstart and run ./run_dev.sh you will already have the admin user with permissions to create new users.","title":"Create Users"},{"location":"auth/create_users/#login-as-admin","text":"To login as admin, go to http://localhost:8000/api/docs and click on the Authorize button. Then, fill in the form with the following data: username: admin password: <password> scope: admin","title":"Login as admin"},{"location":"auth/create_users/#create-a-new-user","text":"To create a new user, go to http://localhost:8000/api/docs and click on the POST /users/ endpoint. Then, fill in the form with the following data: username: <username> role: user password: <password> Click on Execute button and you will see the response with the new user data.","title":"Create a new user"},{"location":"auth/user_login/","text":"User login Once you have your user created (with role user ) you can login the same way you did with the admin user. Go to http://localhost:8000/api/docs and click on the Authorize button. Then, fill in the form with the following data: Now you can use the user and ECG endpoints to upload and view ECGs.","title":"Login as User"},{"location":"auth/user_login/#user-login","text":"Once you have your user created (with role user ) you can login the same way you did with the admin user. Go to http://localhost:8000/api/docs and click on the Authorize button. Then, fill in the form with the following data: Now you can use the user and ECG endpoints to upload and view ECGs.","title":"User login"},{"location":"installation/docker/","text":"Setup with Docker This application runs in a Docker container. Docker compose is used to manage the services. A quick startup script was created to handle all the necessary steps to run the application. The script is called run_dev.sh and is located in the root of the project. To run the application, execute the following command: ./run_dev.sh Follow the instructions, you will be asked to set a superuser password for the API. The application will be available at http://localhost:8000/api/docs . Destroy the dev environment To destroy the dev environment, execute the following command: scripts/destroy_environment.sh This command will stop and remove the containers, networks, volumes, and images created by the run_dev.sh script.","title":"Docker"},{"location":"installation/docker/#setup-with-docker","text":"This application runs in a Docker container. Docker compose is used to manage the services. A quick startup script was created to handle all the necessary steps to run the application. The script is called run_dev.sh and is located in the root of the project. To run the application, execute the following command: ./run_dev.sh Follow the instructions, you will be asked to set a superuser password for the API. The application will be available at http://localhost:8000/api/docs .","title":"Setup with Docker"},{"location":"installation/docker/#destroy-the-dev-environment","text":"To destroy the dev environment, execute the following command: scripts/destroy_environment.sh This command will stop and remove the containers, networks, volumes, and images created by the run_dev.sh script.","title":"Destroy the dev environment"}]}